import json
import logging
from datetime import datetime

import requests

from apps.bot.classes.consts.Exceptions import PWarning
from apps.bot.utils.utils import remove_tz
from apps.service.models import Service, City
from petrovich.settings import env

DAY_TRANSLATOR = {
    'night': '–Ω–æ—á—å',
    'morning': '—É—Ç—Ä–æ',
    'day': '–¥–µ–Ω—å',
    'evening': '–≤–µ—á–µ—Ä',
}

WEATHER_TRANSLATOR = {
    'clear': '–Ø—Å–Ω–æ ‚òÄ',
    'partly-cloudy': '–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ ‚õÖ',
    'cloudy': '–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ üå•',
    'overcast': '–ü–∞—Å–º—É—Ä–Ω–æ ‚òÅ',
    'partly-cloudy-and-light-rain': '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å üåß',
    'partly-cloudy-and-rain': '–î–æ–∂–¥—å üåß',
    'overcast-and-rain': '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å üåßüåß',
    'overcast-thunderstorms-with-rain': '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å, –≥—Ä–æ–∑–∞ üå©',
    'cloudy-and-light-rain': '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å üåß',
    'overcast-and-light-rain': '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å üåß',
    'cloudy-and-rain': '–î–æ–∂–¥—å üåß',
    'overcast-and-wet-snow': '–î–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º üå®',
    'partly-cloudy-and-light-snow': '–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥ üå®',
    'partly-cloudy-and-snow': '–°–Ω–µ–≥ üå®',
    'overcast-and-snow': '–°–Ω–µ–≥–æ–ø–∞–¥ üå®',
    'cloudy-and-light-snow': '–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥ üå®',
    'overcast-and-light-snow': '–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥ üå®',
    'cloudy-and-snow': '–°–Ω–µ–≥ üå®'
}

WEATHER_WIND_DIRECTION_TRANSLATOR = {
    "nw": "—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π",
    "n": "—Å–µ–≤–µ—Ä–Ω—ã–π",
    "ne": "—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π",
    "e": "–≤–æ—Å—Ç–æ—á–Ω—ã–π",
    "se": "—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π",
    "s": "—é–∂–Ω—ã–π",
    "sw": "—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π",
    "w": "–∑–∞–ø–∞–¥–Ω—ã–π",
    "c": "—à—Ç–∏–ª—å",
}
logger = logging.getLogger('bot')


class YandexWeatherAPI:
    URL = "https://api.weather.yandex.ru/v1/informers"
    TOKEN = env.str("YANDEX_WEATHER_TOKEN")
    HEADERS = {
        'X-Yandex-API-Key': TOKEN
    }

    def send_weather_request(self, city: City):
        params = {
            'lat': city.lat,
            'lon': city.lon,
            'lang': 'ru_RU'
        }
        r = requests.get(self.URL, params, headers=self.HEADERS).json()
        logger.debug({"response": r})

        if 'status' in r:
            if r['status'] == 403:
                raise PWarning("–ù–∞ —Å–µ–≥–æ–¥–Ω—è —è –∏—Å—á–µ—Ä–ø–∞–ª –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∫ Yandex Weather :(")

        return r

    def get_weather(self, city: City, use_cached=True):
        entity, created = Service.objects.get_or_create(name=f'weather_{city.name}')
        if use_cached and not created:
            delta_time = (datetime.utcnow() - remove_tz(entity.update_datetime))
            if delta_time.seconds < 3600 and delta_time.days == 0:
                weather_data = json.loads(entity.value)
                return weather_data

        weather_data = self.send_weather_request(city)
        entity.value = json.dumps(weather_data)
        entity.save()
        return weather_data

    def get_weather_str(self, city):
        data = self.get_weather(city)

        now = self.get_weather_part_str(data['fact'])

        forecasts = [self.get_weather_part_str(x) for x in data['forecast']['parts']]
        forecasts_str = "\n\n".join(forecasts)
        return f"–ü–æ–≥–æ–¥–∞ –≤ –≥. {city.name} —Å–µ–π—á–∞—Å:\n" \
               f"{now}\n\n" \
               f"{forecasts_str}"

    @staticmethod
    def get_weather_part_str(data):
        res = [
            f"{WEATHER_TRANSLATOR[data['condition']]}"
        ]

        if 'temp_max' in data:
            if data['temp_min'] != data['temp_max']:
                res.append(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ç {data['temp_min']} –¥–æ {data['temp_max']}¬∞–°")
            else:
                res.append(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {data['temp_max']}¬∞–°")
        else:
            res.append(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {data['temp']}¬∞–°")
        res[-1] += f" (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {data['feels_like']}¬∞–°)"

        res += [
            f"–í–µ—Ç–µ—Ä {WEATHER_WIND_DIRECTION_TRANSLATOR[data['wind_dir']]} {data['wind_speed']}–º/c (–ø–æ—Ä—ã–≤—ã –¥–æ {data['wind_gust']}–º/c)",
            f"–î–∞–≤–ª–µ–Ω–∏–µ {data['pressure_mm']}–º–º.—Ä—Ç.—Å—Ç.",
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å {data['humidity']}%"
        ]

        if data.get('prec_mm', 0) != 0:
            res.append(
                f"–û—Å–∞–¥–∫–∏ {data['prec_mm']}–º–º –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ {int(int(data['prec_period']) / 60)} —á–∞—Å–æ–≤ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {data['prec_prob']}%"
            )

        return "\n".join(res)
