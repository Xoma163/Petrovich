from enum import Enum


class Role(Enum):
    ADMIN = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    CONFERENCE_ADMIN = "–∞–¥–º–∏–Ω –∫–æ–Ω—Ñ—ã"
    MODERATOR = "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä"
    MINECRAFT = "–º–∞–π–Ω–∫—Ä–∞—Ñ—Ç"
    TERRARIA = "—Ç–µ—Ä—Ä–∞—Ä–∏—è"
    STUDENT = "—Å—Ç—É–¥–µ–Ω—Ç"
    MINECRAFT_NOTIFY = "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–∞–π–Ω–∞"
    HOME = "–¥–æ–º"
    USER = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    BANNED = "–∑–∞–±–∞–Ω–µ–Ω"
    TRUSTED = "–¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–π"

    @classmethod
    def has_value(cls, value):
        return value in cls._value2member_map_


class Platform(Enum):
    VK = 'vk'
    TG = 'tg'
    API = 'api'
    YANDEX = 'yandex'

    @classmethod
    def choices(cls):
        return tuple((i.name, i.value) for i in cls)


# PLATFORMS = [x.value for x in list(Platform)]

WEEK_TRANSLATOR = {
    '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 1, '–ø–Ω': 1,
    '–≤—Ç–æ—Ä–Ω–∏–∫': 2, '–≤—Ç': 2,
    '—Å—Ä–µ–¥–∞': 3, '—Å—Ä': 3,
    '—á–µ—Ç–≤–µ—Ä–≥': 4, '—á—Ç': 4,
    '–ø—è—Ç–Ω–∏—Ü–∞': 5, '–ø—Ç': 5,
    '—Å—É–±–±–æ—Ç–∞': 6, '—Å–±': 6,
    '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 7, '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ': 7, '–≤—Å': 7,
}

WEEK_TRANSLATOR_REVERT = {
    1: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    2: '–≤—Ç–æ—Ä–Ω–∏–∫',
    3: '—Å—Ä–µ–¥–∞',
    4: '—á–µ—Ç–≤–µ—Ä–≥',
    5: '–ø—è—Ç–Ω–∏—Ü–∞',
    6: '—Å—É–±–±–æ—Ç–∞',
    7: '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
}

ON_OFF_TRANSLATOR = {
    '–≤–∫–ª': True,
    'on': True,
    '1': True,
    'true': True,
    '–≤–∫–ª—é—á–∏—Ç—å': True,
    '–≤–∫–ª—é—á–∏': True,
    '–≤—Ä—É–±–∏': True,
    '–ø–æ–¥–∫–ª—é—á–∏': True,

    '–≤—ã–∫–ª': False,
    'off': False,
    '0': False,
    'false': False,
    '–≤—ã–∫–ª—é—á–∏—Ç—å': False,
    '–≤—ã–∫–ª—é—á–∏': False,
    '–≤—ã—Ä—É–±–∏': False,
    '–æ—Ç–∫–ª—é—á–∏': False
}

TRUE_FALSE_TRANSLATOR = {
    True: '–≤–∫–ª ‚úÖ',
    False: '–≤—ã–∫–ª ‚õî'
}

WEATHER_TRANSLATOR = {
    'clear': '–Ø—Å–Ω–æ ‚òÄ',
    'partly-cloudy': '–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ ‚õÖ',
    'cloudy': '–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ üå•',
    'overcast': '–ü–∞—Å–º—É—Ä–Ω–æ ‚òÅ',
    'partly-cloudy-and-light-rain': '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å üåß',
    'partly-cloudy-and-rain': '–î–æ–∂–¥—å üåß',
    'overcast-and-rain': '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å üåßüåß',
    'overcast-thunderstorms-with-rain': '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å, –≥—Ä–æ–∑–∞ üå©',
    'cloudy-and-light-rain': '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å üåß',
    'overcast-and-light-rain': '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å üåß',
    'cloudy-and-rain': '–î–æ–∂–¥—å üåß',
    'overcast-and-wet-snow': '–î–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º üå®',
    'partly-cloudy-and-light-snow': '–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥ üå®',
    'partly-cloudy-and-snow': '–°–Ω–µ–≥ üå®',
    'overcast-and-snow': '–°–Ω–µ–≥–æ–ø–∞–¥ üå®',
    'cloudy-and-light-snow': '–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥ üå®',
    'overcast-and-light-snow': '–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥ üå®',
    'cloudy-and-snow': '–°–Ω–µ–≥ üå®'
}

WEATHER_WIND_DIRECTION_TRANSLATOR = {
    "nw": "—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π",
    "n": "—Å–µ–≤–µ—Ä–Ω—ã–π",
    "ne": "—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π",
    "e": "–≤–æ—Å—Ç–æ—á–Ω—ã–π",
    "se": "—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π",
    "s": "—é–∂–Ω—ã–π",
    "sw": "—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π",
    "w": "–∑–∞–ø–∞–¥–Ω—ã–π",
    "c": "—à—Ç–∏–ª—å",
}

DAY_TRANSLATOR = {
    'night': '–Ω–æ—á—å',
    'morning': '—É—Ç—Ä–æ',
    'day': '–¥–µ–Ω—å',
    'evening': '–≤–µ—á–µ—Ä',
}

ATTACHMENT_TRANSLATOR = {
    'audio': '–∞—É–¥–∏–æ',
    'video': '–≤–∏–¥–µ–æ',
    'photo': '—Ñ–æ—Ç–æ',
    'doc': '–¥–æ–∫—É–º–µ–Ω—Ç',
    'audio_message': '–≥–æ–ª–æ—Å–æ–≤–æ–µ'
}

BAD_ANSWERS = [
    '–∫–∞–∫ –∂–µ –≤—ã –º–µ–Ω—è –∑–∞—Ç—Ä–∞—Ö–∞–ª–∏...',
    '—Ç—ã –æ–±–∏–∂–∞–µ—à—å –±–æ—Ç–∞?',
    '—Ç–µ–±–µ –∑–∞–Ω—è—Ç—å—Å—è –Ω–µ—á–µ–º?',
    '...',
    '–æ –±–æ–∂–µ, –æ–ø—è—Ç—å —Ç—ã',
    '—Ç–µ–±–µ –Ω–µ —Å—Ç—ã–¥–Ω–æ?',
    '–∑–∞—á–µ–º —Ç—ã —Ç–∞–∫?',
    '—á—Ç–æ —è —Ç–µ–±–µ —Å–¥–µ–ª–∞–ª?',
    '—á–µ–≥–æ —Ç—ã –¥–æ–±–∏–ª—Å—è?']

DELTA_WEEKDAY = {
    '—Å–µ–≥–æ–¥–Ω—è': 0,
    '–∑–∞–≤—Ç—Ä–∞': 1,
    '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞': 2,
}
